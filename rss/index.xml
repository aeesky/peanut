<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
<channel>
    <title>Znote</title>  
    <link>zqqf16.info</link>  
    <description>Zqqf16的个人BLog，记录我的生活、学习、以及心情。</description>  
    <language>zh-cn</language>  
    <generator>Peanut</generator>  
    <item>  
		<title>Requests抓取网页的编码问题</title>  
		<link>http://zqqf16.info/posts/python-requests-encoding-problems.html</link>  
		<description>&lt;p&gt;经常在各大python论坛上看到有关爬虫的问题，实在是搞不明白这玩意儿除了对做搜索引擎还能有啥用。今天本着好奇的态度，打算试一试。&lt;/p&gt;

&lt;p&gt;一番Google之后，发现了个很NB的库&lt;strong&gt;Requests&lt;/strong&gt;，比之前我用过的liburl2等http库简单多了。出于测试的目的，打算抓取一下我的博客。&lt;/p&gt;

&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&#34;c&#34;&gt;#!/usr/bin/env python&lt;/span&gt;&lt;br \&gt;&lt;span class=&#34;c&#34;&gt;# -*- encoding: utf-8 -*-&lt;/span&gt;&lt;br \&gt;&lt;br \&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;requests&lt;/span&gt;&lt;br \&gt;&lt;br \&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;http://zqqf16.info&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;br \&gt;&lt;br \&gt;&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;br \&gt;&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encoding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;br \&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;打印内容的时候一切正常，但是&lt;code&gt;encoding&lt;/code&gt;却显示的是&lt;code&gt;ISO-8859-1&lt;/code&gt;。我的页面上明明写着&lt;code&gt;&amp;lt;meta http-equiv=&#34;Content-Type&#34; content=&#34;text/html;charset=utf-8&#34;&amp;gt;&lt;/code&gt;，但结果却不是utf-8，百思不得其解，难道是我的html格式不对？&lt;/p&gt;

&lt;p&gt;为了验证这个问题，我抓取了一下百度的首页，它的encoding显示的是&#39;utf-8&#39;，而他的头部写的格式和我的一样。&lt;/p&gt;

&lt;p&gt;这下迷茫了，Google了很长时间也没找到答案，只能仔细翻看官方的文档了。&lt;/p&gt;

&lt;p&gt;终于，在&lt;a href=&#34;http://docs.python-requests.org/en/latest/user/advanced.html#encodings&#34;&gt;文档里&lt;/a&gt;发现了这么一段：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When you receive a response, Requests makes a guess at the encoding to use for decoding the response when you call the Response.text method. Requests will first check for an encoding in the HTTP header, and if none is present, will use charade to attempt to guess the encoding.&lt;/p&gt;
  
  &lt;p&gt;The only time Requests will not do this is if no explicit charset is present in the HTTP headers and the Content-Type header contains text. In this situation, RFC 2616 specifies that the default charset must be ISO-8859-1. Requests follows the specification in this case. If you require a different encoding, you can manually set the Response.encoding property, or use the raw Response.content.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这我才明白了，原来HTTP头部也有个“Content-Type”字段，requests会先去找HTTP头部的这个字段，如果没有，就调用“charade”来猜测编码。而默认的编码格式正是“ISO-8859-1”。&lt;/p&gt;

&lt;p&gt;用chrome的调试工具看了一下baidu.com的Response Header，有这样一句“Content-Type:text/html;charset=utf-8”。而我的&lt;a href=&#34;http://zqqf16.info&#34;&gt;zqqf16.info&lt;/a&gt;却没有。这就是为什么我的编码格式识别不出来的原因。&lt;/p&gt;

&lt;p&gt;由于我的博客在Github上，没法控制他的HTTP server的行为。为了能让requests识别出UTF-8，我在之前的代码里加了一句，为其指定了编码格式。&lt;/p&gt;

&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encoding&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;br \&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;问题搞定了，多看看官方文档还是很有帮助滴。&lt;/p&gt;
</description>  
		<author>Zqqf16</author>  
		<copyright></copyright>  
		<pubDate>Thu, 18 Jul 2013 00:00:00 +0800</pubDate>  
    </item>  
    <item>  
		<title>tornado源码之Configurable类</title>  
		<link>http://zqqf16.info/posts/tornado-configurable.html</link>  
		<description>&lt;p&gt;最近比较清闲，打算研究一下tornado的源码。之前很少接触过网络编程方面的东西，对Epoll只是有个概念上的了解，所以就在网上找了一个别人写的&lt;a href=&#34;http://www.cnblogs.com/Bozh/archive/2012/07/22/2603976.html&#34;&gt;源码分析&lt;/a&gt;来作为入门。&lt;/p&gt;

&lt;p&gt;第一讲是说IOLoop的，也是tornado的核心。程序中主函数通常调用&lt;code&gt;tornado.ioloop.IOLoop.instance().start()&lt;/code&gt;来启动IOLoop，但是看了一下IOLoop的实现，start方法是这样的：&lt;/p&gt;

&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;code&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&lt;br \&gt;        &lt;span class=&#34;sd&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Starts the I/O loop.&lt;/span&gt;&lt;br \&gt;&lt;br \&gt;&lt;span class=&#34;sd&#34;&gt;        The loop will run until one of the callbacks calls `stop()`, which&lt;/span&gt;&lt;br \&gt;&lt;span class=&#34;sd&#34;&gt;        will make the loop stop after the current event iteration completes.&lt;/span&gt;&lt;br \&gt;&lt;span class=&#34;sd&#34;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br \&gt;        &lt;span class=&#34;k&#34;&gt;raise&lt;/span&gt; &lt;span class=&#34;ne&#34;&gt;NotImplementedError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;br \&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;也就是说&lt;code&gt;IOLoop&lt;/code&gt;是个抽象的基类，具体工作是由它的子类负责的。由于是Linux平台，所以应该用&lt;code&gt;Epoll&lt;/code&gt;，对应的类是&lt;code&gt;PollIOLoop&lt;/code&gt;。&lt;code&gt;PollIOLoop&lt;/code&gt;的&lt;code&gt;start&lt;/code&gt;方法开始了事件循环。&lt;/p&gt;

&lt;p&gt;问题来了，&lt;code&gt;tornado.ioloop.IOLoop.instance()&lt;/code&gt;是怎么返回&lt;code&gt;PollIOLoop&lt;/code&gt;实例的呢？刚开始有点想不明白，后来看了一下IOLoop的代码就豁然开朗了。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;IOLoop&lt;/code&gt;继承自&lt;code&gt;Configurable&lt;/code&gt;，后者位于&lt;code&gt;tornado/util.py&lt;/code&gt;。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A configurable interface is an (abstract) class whose constructor acts as a factory function for one of its implementation subclasses. The implementation subclass as well as optional keyword arguments to its initializer can be set globally at runtime with &lt;code&gt;configure&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;Configurable&lt;/code&gt;类实现了一个工厂方法，也就是设计模式中的“工厂模式”，看一下&lt;code&gt;__new__&lt;/code&gt;函数的实现：&lt;/p&gt;

&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;code&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__new__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&lt;br \&gt;        &lt;span class=&#34;n&#34;&gt;base&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;configurable_base&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;br \&gt;        &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;&lt;br \&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;br \&gt;            &lt;span class=&#34;n&#34;&gt;impl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;configured_class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;br \&gt;            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__impl_kwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;br \&gt;                &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__impl_kwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;br \&gt;        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;br \&gt;            &lt;span class=&#34;n&#34;&gt;impl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;br \&gt;        &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;br \&gt;        &lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Configurable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__new__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;impl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;br \&gt;        &lt;span class=&#34;c&#34;&gt;# initialize vs __init__ chosen for compatiblity with AsyncHTTPClient&lt;/span&gt;&lt;br \&gt;        &lt;span class=&#34;c&#34;&gt;# singleton magic.  If we get rid of that we can switch to __init__&lt;/span&gt;&lt;br \&gt;        &lt;span class=&#34;c&#34;&gt;# here too.&lt;/span&gt;&lt;br \&gt;        &lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;initialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;br \&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;&lt;br \&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;当创建一个&lt;code&gt;Configurable&lt;/code&gt;类的实例的时候，其实创建的是&lt;code&gt;configurable_class()&lt;/code&gt;返回的类的实例。&lt;/p&gt;

&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;code&gt;    &lt;span class=&#34;nd&#34;&gt;@classmethod&lt;/span&gt;&lt;br \&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;configured_class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&lt;br \&gt;        &lt;span class=&#34;sd&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Returns the currently configured class.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br \&gt;        &lt;span class=&#34;n&#34;&gt;base&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;configurable_base&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;br \&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__impl_class&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;br \&gt;            &lt;span class=&#34;n&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__impl_class&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;configurable_default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;br \&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__impl_class&lt;/span&gt;&lt;br \&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;最后，就是返回的&lt;code&gt;configurable_default()&lt;/code&gt;。此函数在IOLoop中的实现如下：&lt;/p&gt;

&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;code&gt;    &lt;span class=&#34;nd&#34;&gt;@classmethod&lt;/span&gt;&lt;br \&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;configurable_default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&lt;br \&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;hasattr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;epoll&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&lt;br \&gt;            &lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tornado.platform.epoll&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EPollIOLoop&lt;/span&gt;&lt;br \&gt;            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EPollIOLoop&lt;/span&gt;&lt;br \&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;hasattr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;kqueue&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&lt;br \&gt;            &lt;span class=&#34;c&#34;&gt;# Python 2.6+ on BSD or Mac&lt;/span&gt;&lt;br \&gt;            &lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tornado.platform.kqueue&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;KQueueIOLoop&lt;/span&gt;&lt;br \&gt;            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;KQueueIOLoop&lt;/span&gt;&lt;br \&gt;        &lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tornado.platform.select&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SelectIOLoop&lt;/span&gt;&lt;br \&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SelectIOLoop&lt;/span&gt;&lt;br \&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;EPollIOLoop&lt;/code&gt;是&lt;code&gt;PollIOLoop&lt;/code&gt;的子类。至此，这个流程就理清楚了。&lt;/p&gt;

&lt;p&gt;第一天看tornado的代码就收获不少，&lt;strong&gt;最好的学习方式就是看别人的代码&lt;/strong&gt;这话一点都不假。&lt;/p&gt;
</description>  
		<author>Zqqf16</author>  
		<copyright></copyright>  
		<pubDate>Tue, 16 Jul 2013 00:00:00 +0800</pubDate>  
    </item>  
    <item>  
		<title>IOS7 Beta 3体验</title>  
		<link>http://zqqf16.info/posts/ios7.html</link>  
		<description>&lt;p&gt;前几天想起来有台公司发的iPad mini正在闲置中，于是就心血来潮，装了个IOS 7 beta 3 来体验一番。具体的安装步骤就不多说了，Google一搜一大把。&lt;/p&gt;

&lt;p&gt;IOS7特性上的东西我就不细说了，网上有很多测评，这里将着重说一下我觉得不爽的地方。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;卡顿&lt;/strong&gt; &lt;br /&gt;
不知道是我的mini配置太低的原因还是Beta版的问题，反正使用起来明显能感觉到卡顿。画面切换卡，调出通知中心卡，卡得跟安卓似的。。。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;小Bug一堆&lt;/strong&gt; &lt;br /&gt;
先来看几张图： &lt;br /&gt;
&lt;img src=&#34;/static/img/ios7/background.png&#34; alt=&#34;background&#34; /&gt; &lt;br /&gt;
在从多任务界面切换回主界面的时候，会有一定的几率出现背景消失的情况。    &lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/static/img/ios7/settings.png&#34; alt=&#34;settings&#34; /&gt; &lt;br /&gt;
在设置里有很多排版混乱的情况，文字窜行了。  &lt;/p&gt;

&lt;p&gt;类似的小Bug还有很多，但我觉得这些都不是问题，毕竟是Beta版，正式版的时候会有改善。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;文字太小&lt;/strong&gt; &lt;br /&gt;
状态栏的文字图标明显缩小，看起来有点费眼。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;设计有缺陷&lt;/strong&gt; &lt;br /&gt;
IOS7中大量采用了半透明的设计，通知菜单、Dock栏、甚至一些应用程序比如“提醒事项”都用到了。但是这也带来了一些问题，就是背景色和前景色顺色的问题。比如下面这张图： &lt;br /&gt;
&lt;img src=&#34;/static/img/ios7/dock.png&#34; alt=&#34;color&#34; /&gt; &lt;br /&gt;
看看最下面的“邮件”和“视频”两个图标，完全和背景顺色了，更讽刺的是这张背景图片是系统自带的。     &lt;/p&gt;

&lt;p&gt;再看看图标设计，大多数图标都能感受到一种“小清新”的气质，或者说所谓的扁平化风格。但有些图标，比如上图中的“备忘录”以及“提醒事项”，完全就像是个业余认识因为时间不够搞出来的半成品，个人感觉丑爆了。   &lt;/p&gt;

&lt;p&gt;再看看下面这张图： &lt;br /&gt;
&lt;img src=&#34;/static/img/ios7/settings2.png&#34; alt=&#34;settings&#34; /&gt; &lt;br /&gt;
看看左侧一栏，总觉得有些乱，分隔线和滚动条看起来一点都不搭。。。   &lt;/p&gt;

&lt;p&gt;通知中心： &lt;br /&gt;
&lt;img src=&#34;/static/img/ios7/notification.png&#34; alt=&#34;notice&#34; /&gt; &lt;br /&gt;
IOS7中的通知中心改动挺大，分成了“今天”、“所有通知”、“未接来电”三部分，但是这三部分不能通过左右滑动屏幕来切换，每次都得手动点上去才行。这在iPhone中无所谓，因为屏幕小，很容易点到。但是在iPad中就有点不方便了。双手拿着设备，切换的时候还得空出一只手过去点一下，实在是不方便。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;文件夹&lt;/strong&gt;  &lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/static/img/ios7/floder.png&#34; alt=&#34;floder&#34; /&gt; &lt;br /&gt;
文件夹的改动也挺大，支持分页，每个文件夹内可以放N多图标。但问题也来了，当放置的图标过多的时候只能显示第一页的内容，很不直观。很有可能某些应用就这样被遗忘到角落里了。另外，文件夹的展开方式我觉得也不如IOS6中的舒服。&lt;/p&gt;

&lt;p&gt;总的来说，这次IOS7中的改进还是十分令人满意的，毕竟是Beta版。希望在正式版出来的时候能够达到或者接近完美。&lt;/p&gt;
</description>  
		<author>Zqqf16</author>  
		<copyright></copyright>  
		<pubDate>Thu, 11 Jul 2013 00:00:00 +0800</pubDate>  
    </item>  
    <item>  
		<title>幽门螺旋杆菌</title>  
		<link>http://zqqf16.info/posts/helicobacter-pylori.html</link>  
		<description>&lt;blockquote&gt;
  &lt;p&gt;每次从医院回来，就感觉没有什么比小命还重要。。。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;前一段时间感觉胃不太舒服，吃完东西就会堵得慌，得使劲揉揉才能缓解。被折磨了很久之后终于下定决心去医院看看。不看不知道，一看吓一跳。。。&lt;/p&gt;

&lt;p&gt;其实病因就是消化不良，但是为了彻底了解病因，在医生的建议下，我做了一些全面的检查。结果发现我胃里的&lt;a href=&#34;http://baike.baidu.com/view/67756.htm&#34;&gt;幽门螺旋杆菌&lt;/a&gt;超标了，而且超标的比较严重。&lt;/p&gt;

&lt;p&gt;第一次知道这玩意儿，还是在很同事聊天中不经意间听说的。当时也没在意，心想着反正我平时很少出去吃饭，一般不会感染。没想到这东西已经在我胃里了。看到检验结果时有一种不寒而栗的感觉，慎得慌。。。&lt;/p&gt;

&lt;p&gt;从医院回来后就感觉到处都是脏的，晚上把家里的餐具什么的放在锅里煮了很长时间来消毒。还特意在淘宝上买了个紫外线灯。希望卫生的习惯能够保持下去。&lt;/p&gt;
</description>  
		<author>Zqqf16</author>  
		<copyright></copyright>  
		<pubDate>Thu, 11 Jul 2013 00:00:00 +0800</pubDate>  
    </item>  
    <item>  
		<title>近期状态</title>  
		<link>http://zqqf16.info/posts/recent-status.html</link>  
		<description>&lt;blockquote&gt;
  &lt;p&gt;很久没写blog，都快忘了。为了不让这个来之不易的blog荒废，决定更新一下最近的状态。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;工作&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;最近工作方面发生了比较大的变化，由于公司产品及人员调整，我要负责IOS客户端的开发了，也算是转行了。
这两周一直在学Objective-C以及IOS开发相关的东西，目前算是入门了吧。以后的博客可能会写一些这方面的东西。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;生活&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;去了一趟郑州，感受了一下中原文化，吃了当地名吃“葛记焖饼”。要是郑州也靠海的话我真想过去定居～&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;其他&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Google Reader 关了，选择了Digg Reader这个做替代。 &lt;br /&gt;
GitCafe 私有项目开始收费了，强烈支持。 &lt;br /&gt;
尝试装黑苹果，以失败告终，决心攒钱买个Mac Mini。 &lt;br /&gt;
北京连续大晴天，受宠若惊，喜出望外。 &lt;br /&gt;
研究自制豆腐脑，差强人意。  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;吐槽&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;公司的采购效率忒低。申请一台MAC设备，申请了半个月也没见到。两个周了，天天看Apple的Develop guide。&lt;/p&gt;
</description>  
		<author>Zqqf16</author>  
		<copyright></copyright>  
		<pubDate>Thu, 04 Jul 2013 00:00:00 +0800</pubDate>  
    </item>  
</channel>  
</rss>  

<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
<channel>
    <title>Znote</title>  
    <link>zqqf16.info</link>  
    <description>Zqqf16的个人BLog，记录我的生活、学习、以及心情。</description>  
    <language>zh-cn</language>  
    <generator>Peanut</generator>  
    <item>  
		<title>理解Git的暂存区</title>  
		<link>http://zqqf16.info/posts/understand-git-stage.html</link>  
		<description>&lt;p&gt;虽然用了好几个月的Git，今天才了解了“换存区”这个东西，惭愧啊。。。&lt;/p&gt;

&lt;p&gt;在公司用的是CVS，因此用&lt;code&gt;git add&lt;/code&gt;的时候就以为和&lt;code&gt;cvs add&lt;/code&gt;的作用是一样的，把新文件加到代码库。后来学了一招&lt;code&gt;git commit -a&lt;/code&gt;，还以为-a就是--all的意思。稀里糊涂地用到现在。。。&lt;/p&gt;

&lt;p&gt;Git中的暂存区类似于任务列表，当对工作区的文件做了修改之后，执行&lt;/p&gt;

&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;code&gt;git add filename&lt;br \&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;就会把修改的文件加到这个任务列表中，当执行&lt;/p&gt;

&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;code&gt;git commit&lt;br \&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;的时候，暂存区中的改动就会提交到版本库中，而在“git add”之后所做的改动就不会被提交。&lt;/p&gt;

&lt;p&gt;命令&lt;/p&gt;

&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;code&gt;git checkout filename&lt;br \&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;是用暂存区中的文件来替换工作区中的文件。&lt;/p&gt;

&lt;p&gt;命令&lt;/p&gt;

&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;code&gt;git checkout HEAD&lt;br \&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;是用HEAD指向的版本库中的文件来替换暂存区和工作区的文件。&lt;/p&gt;

&lt;p&gt;好了，先这么多了。通过这件事总结出一个道理：经验有时候会形成思维定势。&lt;/p&gt;
</description>  
		<author>Zqqf16</author>  
		<copyright></copyright>  
		<pubDate>Wed, 05 Jun 2013 00:00:00 +0800</pubDate>  
    </item>  
    <item>  
		<title>Ubuntu下好用的Markdown编辑器</title>  
		<link>http://zqqf16.info/posts/markdown-editor-under-ubuntu.html</link>  
		<description>&lt;p&gt;之前在Ubuntu下一直用Vim来编辑Markdown，纯英文还好，但是Vim里输入汉语实在是忒复杂了。&lt;/p&gt;

&lt;p&gt;后来在Ubuntu软件中心里面搜&#34;Markdown&#34;，发现了一个不错的编辑器——ReText。&lt;/p&gt;

&lt;p&gt;可以直接用apt-get来安装：&lt;/p&gt;

&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;sudo apt-get install retext&lt;br \&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在某些情况下，工具栏的图标显示不出来。后来搜到了这篇&lt;a href=&#34;http://www.e0356.com/2013/02/242&#34;&gt;文章&lt;/a&gt;，完美的解决了这个问题。&lt;/p&gt;

&lt;p&gt;在Ubuntu下直接执行：&lt;/p&gt;

&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;gsettings get org.gnome.desktop.interface icon-theme&lt;br \&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;我这显示的是&#39;ubuntu-mono-dark&#39;。&lt;/p&gt;

&lt;p&gt;打开“～/.config/ReText\ project/ReText.conf”，加入&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;iconThem=ubuntu-mono-dark
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;重新打开ReText就OK了~&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/static/img/retext.png&#34; alt=&#34;图片&#34; /&gt;&lt;/p&gt;
</description>  
		<author>Zqqf16</author>  
		<copyright></copyright>  
		<pubDate>Tue, 04 Jun 2013 00:00:00 +0800</pubDate>  
    </item>  
    <item>  
		<title>重拾C语言之运算符优先级</title>  
		<link>http://zqqf16.info/posts/c-priority.html</link>  
		<description>&lt;p&gt;总是记不住C语言各个运算符的优先级，&lt;s&gt;每次用的时候都得用笨办法——加括号。虽然成功率很高，但是稍微长一点的语句可读性极差&lt;/s&gt;。因此，就借最近整理C语言知识点的时机恶补一下。&lt;/p&gt;

&lt;p&gt;注意：下面的这段内容抄自&lt;a href=&#34;http://baike.baidu.com/view/1516130.htm&#34;&gt;百度百科&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;1级（左结合）&lt;/strong&gt; &lt;br /&gt;
  ( ) 圆括号；[ ]下标运算符；-&gt;指向结构体成员运算符；. 结构体成员运算符。 &lt;br /&gt;
  &lt;strong&gt;2级（右结合）&lt;/strong&gt; &lt;br /&gt;
  “ ! ”逻辑非运算符；“ ~ ”按位取反运算符；“ ++ ”前缀增量运算符；“ -- ”前缀减量运算符； &lt;br /&gt;
  “ - ”负号运算符；(类型)类型转换运算符；“ * ”指针运算符；“ &amp;amp; ”地址运算符； &lt;br /&gt;
  “sizeof ” 长度运算符。 &lt;br /&gt;
  &lt;strong&gt;3级（左结合）&lt;/strong&gt; &lt;br /&gt;
  “ * ” 乘法运算符；“ / ”除法运算符；“ % ” 取余运算符。 &lt;br /&gt;
  &lt;strong&gt;4级（左结合）&lt;/strong&gt; &lt;br /&gt;
  “ + ”加法运算符；“ - ”减法运算符。 &lt;br /&gt;
  &lt;strong&gt;5级（左结合）&lt;/strong&gt; &lt;br /&gt;
  &amp;lt;&amp;lt; 左移运算符；&amp;gt;&amp;gt; 右移运算符。 &lt;br /&gt;
  &lt;strong&gt;6级（左结合）&lt;/strong&gt; &lt;br /&gt;
  &amp;lt;、&amp;lt;=、&amp;gt;、&amp;gt;=关系运算符。 &lt;br /&gt;
  &lt;strong&gt;7级（左结合）&lt;/strong&gt; &lt;br /&gt;
  “ == ”等于运算符；“ != ”不等于运算符。 &lt;br /&gt;
  &lt;strong&gt;8级（左结合）&lt;/strong&gt; &lt;br /&gt;
  “ &amp;amp; ”按位与运算符。 &lt;br /&gt;
  &lt;strong&gt;9级（左结合）&lt;/strong&gt; &lt;br /&gt;
  “ ∧ ”按位异或运算符。 &lt;br /&gt;
  &lt;strong&gt;10级（左结合）&lt;/strong&gt; &lt;br /&gt;
  “ | ”按位或运算符。 
  &lt;strong&gt;11级（左结合）&lt;/strong&gt; &lt;br /&gt;
  “&amp;amp;&amp;amp;”逻辑与运算符。 &lt;br /&gt;
  &lt;strong&gt;12级（左结合）&lt;/strong&gt; &lt;br /&gt;
  “ || ”逻辑或运算符。 &lt;br /&gt;
  &lt;strong&gt;13级（右结合）&lt;/strong&gt; &lt;br /&gt;
  ? :条件运算符。 &lt;br /&gt;
  &lt;strong&gt;14级（右结合）&lt;/strong&gt; &lt;br /&gt;
  =、 +=、 -=、 *=、 /=、 %=、 &amp;amp;=、 ^=、 |=、 &amp;lt;&amp;lt;=、 &amp;gt;&amp;gt;=赋值运算符。 &lt;br /&gt;
  &lt;strong&gt;15级（左结合）&lt;/strong&gt; &lt;br /&gt;
  “，”逗号运算符。  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;---抄袭结束---&lt;/p&gt;

&lt;p&gt;记住“==”和“!=”的优先级高于“&amp;amp;&amp;amp;”和“||”，&lt;code&gt;if&lt;/code&gt;的时候就可以省下好几对括号了。&lt;/p&gt;

&lt;p&gt;记住[ ]的优先级高于“*”, 就可以区分数组的指针和指针数组了(&lt;code&gt;char (*p)[20]&lt;/code&gt;，&lt;code&gt;char *p[20]&lt;/code&gt;)。&lt;/p&gt;

&lt;p&gt;PS：如果实在记不清，还是建议乖乖地套上括号，这是最靠谱的方法。&lt;/p&gt;

&lt;p&gt;PS2：“只记住两个优先级就够了：乘法和除法优先于加减法，其他操作一律加括号” —— 《C专家编程》&lt;/p&gt;
</description>  
		<author>Zqqf16</author>  
		<copyright></copyright>  
		<pubDate>Tue, 28 May 2013 00:00:00 +0800</pubDate>  
    </item>  
    <item>  
		<title>重拾C语言之数组初始化</title>  
		<link>http://zqqf16.info/posts/c-array-initialization.html</link>  
		<description>&lt;p&gt;记得刚工作的时候，每次用字符串数组都是小心翼翼。当时基本都是这样：&lt;/p&gt;

&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&lt;br \&gt;&lt;span class=&#34;n&#34;&gt;memset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;br \&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;那时颇为自豪，自认为很少有菜鸟能像我这样注意这些问题。直到后来有一次代码review，在一老鸟面前班门弄斧，结果被他指出来了，说我这样会浪费一次函数调用，直接&lt;code&gt;char str[32] = {0}&lt;/code&gt;更好。刚开始我还以为这是一种特殊语句，是把数组的每个元素都赋0。&lt;/p&gt;

&lt;p&gt;有一次我想把数组全初始化成1，就直接&lt;code&gt;int list[4] = {1}&lt;/code&gt;。结果进引起了一个bug，害得我花了很长时间才找到问题所在——list中除了第一个是1,其它的都是0。于是我决定好好研究一下，争取不再犯这样的错误。&lt;/p&gt;

&lt;p&gt;其实，这玩意很简单，简单到不能再简单了，以至于研究完了我都觉得羞愧了。。。&lt;/p&gt;

&lt;p&gt;首先，看下面的语句：&lt;/p&gt;

&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;3&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&lt;br \&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这是标准的数组初始化方法，字符串数组的每个元素都被赋上初始值（大括号内的个数等于数组长度）。&lt;/p&gt;

&lt;p&gt;当大括号内的值小于数组长度的时候，比如：&lt;/p&gt;

&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&lt;br \&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;str[0]和str[1]会被赋上相应的初始值，而剩下的元素会被初始化成0。这基本是没本C语言书里面都会讲到的。&lt;/p&gt;

&lt;p&gt;所以，反过来再看看之前的例子：&lt;/p&gt;

&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&lt;br \&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;就是把第一个元素赋1，其他的元素都被初始化成0。&lt;/p&gt;

&lt;p&gt;就是这么简单。&lt;/p&gt;
</description>  
		<author>Zqqf16</author>  
		<copyright></copyright>  
		<pubDate>Sun, 26 May 2013 00:00:00 +0800</pubDate>  
    </item>  
    <item>  
		<title>重拾C语言之strncpy</title>  
		<link>http://zqqf16.info/posts/c-strncpy.html</link>  
		<description>&lt;blockquote&gt;
  &lt;p&gt;前一段时间Python用惯了，冷不丁地切换回C，发现很多基础东西都有点模糊了。从今天起，我将把一些平时碰到的知识点整理起来，起名为“重拾C语言”系列。纯粹的基础知识，老鸟绕行~&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;strncpy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;br \&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;虽然加了个n，当时这个函数一点也不靠谱。它并不能保证dest的末尾一定是&lt;code&gt;&#39;\0&#39;&lt;/code&gt;。来看看这个函数的简单实现（来自man手册）:&lt;/p&gt;

&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;br \&gt;&lt;span class=&#34;nf&#34;&gt;strncpy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;br \&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;br \&gt;    &lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;br \&gt;&lt;br \&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;br \&gt;        &lt;span class=&#34;n&#34;&gt;dest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt; &lt;br \&gt;&lt;br \&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;br \&gt;        &lt;span class=&#34;n&#34;&gt;dest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;br \&gt;&lt;br \&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;br \&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;br \&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;只有当n大于src的长度才会在dest的末尾填“\0”。&lt;/p&gt;
</description>  
		<author>Zqqf16</author>  
		<copyright></copyright>  
		<pubDate>Fri, 24 May 2013 00:00:00 +0800</pubDate>  
    </item>  
</channel>  
</rss>  
